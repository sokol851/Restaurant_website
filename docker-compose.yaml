services:
  redis:
    image: redis:latest
    restart: on-failure
    expose:
      - "6379"
    networks:
      - restaurant
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 5

  db:
    image: postgres:16-alpine
    restart: on-failure
    networks:
      - restaurant
    env_file:
      - .env
    expose:
      - "5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "-c", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build: .
    tty: true
    ports:
      - "8000:8000"
    env_file:
      - .env
    command: sh -c "python manage.py makemigrations && python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/code
    networks:
      - restaurant

  celery:
    build: .
    networks:
      - restaurant
    restart: on-failure
    tty: true
    command: celery -A config worker -l INFO
    volumes:
      - .:/code
    env_file:
      - .env
    depends_on:
      - redis
      - db
      - app

  celery-beat:
    build: .
    env_file:
      - .env
    networks:
      - restaurant
    restart: on-failure
    tty: true
    command: celery -A config beat -l INFO
    volumes:
      - .:/code
    depends_on:
      - redis
      - db
      - app

networks:
  restaurant:
    driver: bridge

volumes:
  pg_data: